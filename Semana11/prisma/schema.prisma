// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  name  String?
  password  String

  avatarUrl String?

  role String @default("user")  // user, admin, etc.

  createdAt DateTime  @default(now())
  updatedAt DateTime?

  Wishlist Wishlist[]
}

model Game {
  id  Int     @default(autoincrement()) @id
  title String
  genre String
  releaseDate DateTime
  description String?
  coverUrl String?

  publisher String?
  developer String?

  createdAt DateTime @default(now())
  updatedAt DateTime?

  Wishlist Wishlist[]

  GameStore GameStore[]
}

// a gente tem um cenario especifico de admin (gerenciamento dos jogos e das stores)

// o usuario "comum" pode gerenciar sua wishlist
// TODO - IMPLEMENTAR isso no controller e service
model Wishlist {
  id        Int     @default(autoincrement()) @id
  userId    Int
  gameId    Int

  user      User    @relation(fields: [userId], references: [id])
  game      Game    @relation(fields: [gameId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime?
}

// IDEIA: review + rating por parte dos usuarios
// IDEIA: grupos de usuarios / bate papos baseado em wishlists parecidas
// IDEIA: recomendação de jogos baseado em wishlists de terceiros
// TODO - IMPLEMENTAR isso no controller e service
model Store {
  id    Int     @default(autoincrement()) @id
  name  String  @unique
  
  platform String // e.g., pc or console

  createdAt DateTime @default(now())
  updatedAt DateTime?

  GameStore GameStore[]
}

// Model to represent a game in a store with price
// TODO - IMPLEMENTAR isso no controller e service
model GameStore {
  id        Int     @default(autoincrement()) @id
  gameId    Int
  storeId   Int
  price     Float

  game      Game    @relation(fields: [gameId], references: [id])
  store     Store   @relation(fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime?
}

// poderia mas por enquanto nao vamos fazer, historico de preços